This file is kept here just as a reference. It lists the bitmap representation of arabic characters on a 7x5 grid as it was extracted from the article "Effects of pixel shape and color, and matrix pixel density of Arabic digital typeface on charactersâ€™ legibility" (p. 659).

The file arabic_chars.h is based on this one but the bitmaps have been reordered in alphabetical order.

PDF of the article can be retrieved at: http://ur1.ca/b170h

uint8_t PROGMEM ARABIC_CHARS [][5] = {

// Block: top-left
	{ 0x00, 0x00, 0x7c, 0x00, 0x00, }, // alif_iso & alif_ini
	{ 0x00, 0x00, 0x7c, 0x04, 0x04, }, // alif_med & alif_end
	{ 0x0c, 0x04, 0x05, 0x04, 0x0c, }, // ba_iso & ba_end
	{ 0x04, 0x04, 0x05, 0x0c, 0x00, }, // ba_ini
	{ 0x04, 0x04, 0x0d, 0x04, 0x04, }, // ba_med

	{ 0x0c, 0x24, 0x04, 0x24, 0x0c, }, // ta_end
	{ 0x24, 0x04, 0x24, 0x0c, 0x00, }, // ta_ini
	{ 0x04, 0x24, 0x0c, 0x24, 0x04, }, // ta_med
	{ 0x0c, 0x24, 0x44, 0x24, 0x0c, }, // tha_end
	{ 0x24, 0x44, 0x24, 0x0c, 0x00, }, // tha_ini

	{ 0x04, 0x24, 0x4c, 0x24, 0x04, }, // tha_med
	{ 0x26, 0x29, 0x31, 0x35, 0x20, }, // jim_iso
	{ 0x14, 0x14, 0x15, 0x0c, 0x04, }, // jim_med
	{ 0x04, 0x14, 0x15, 0x14, 0x0c, }, // jim_ini
	{ 0x27, 0x29, 0x30, 0x32, 0x28, }, // jim_end

// Bloc: top-right
	{ 0x26, 0x29, 0x31, 0x30, 0x20, }, // ha_iso
	{ 0x14, 0x14, 0x14, 0x0c, 0x04, }, // ha_med (*)
	{ 0x04, 0x14, 0x14, 0x14, 0x0c, }, // ha_ini
	{ 0x26, 0x29, 0x31, 0x30, 0x28, }, // ha_end
	{ 0x12, 0x15, 0x59, 0x19, 0x14, }, // kha_end
	{ 0x04, 0x14, 0x54, 0x0c, 0x04, }, // kha_med

	{ 0x04, 0x14, 0x54, 0x14, 0x0c, }, // kha_ini
	{ 0x12, 0x15, 0x59, 0x19, 0x10, }, // kha_iso
	{ 0x00, 0x02, 0x12, 0x0e, 0x00, }, // dal_iso & dal_ini
	{ 0x00, 0x02, 0x12, 0x0e, 0x02, }, // dal_med & dal_end
	{ 0x00, 0x02, 0x52, 0x0e, 0x00, }, // zal_iso & zal_ini

	{ 0x00, 0x02, 0x52, 0x0e, 0x02, }, // zal_med & zal_end
	{ 0x01, 0x01, 0x02, 0x0c, 0x04, }, // ra_med & ra_end
	{ 0x01, 0x01, 0x02, 0x2c, 0x04, }, // zay_med & zay_end
	{ 0x01, 0x01, 0x02, 0x0c, 0x00, }, // ra_iso & ra_ini
	{ 0x01, 0x01, 0x02, 0x2c, 0x00, }, // zay_iso & zay_ini

// Block: middle-left
	{ 0x0c, 0x04, 0x0c, 0x04, 0x0c, }, // sin_ini & sin_med
	{ 0x0c, 0x24, 0x4c, 0x24, 0x0c, }, // shin_ini & shin_med
	{ 0x0c, 0x04, 0x0e, 0x14, 0x1c, }, // sad_ini & sad_med
	{ 0x0c, 0x04, 0x4e, 0x14, 0x1c, }, // dad_ini & dad_med
	{ 0x04, 0x7e, 0x14, 0x14, 0x0c, }, // ta_all

	{ 0x04, 0x7e, 0x14, 0x54, 0x0c, }, // zha_all
	{ 0x06, 0x09, 0x71, 0x51, 0x10, }, // ayn_iso
	{ 0x04, 0x04, 0x0c, 0x14, 0x14, }, // ayn_ini
	{ 0x04, 0x14, 0x1c, 0x14, 0x04, }, // ayn_med
	{ 0x06, 0x09, 0x31, 0x31, 0x08, }, // ayn_end

	{ 0x46, 0x09, 0x71, 0x51, 0x10, }, // ghayn_iso
	{ 0x04, 0x04, 0x5c, 0x14, 0x04, }, // ghayn_ini
	{ 0x04, 0x14, 0x5c, 0x14, 0x04, }, // ghayn_med
	{ 0x46, 0x09, 0x31, 0x31, 0x08, }, // ghayn_end
	{ 0x0c, 0x44, 0x04, 0x34, 0x3c, }, // fa_end

// Block: middle-right
	{ 0x44, 0x04, 0x34, 0x3c, 0x00, }, // fa_ini
	{ 0x04, 0x1c, 0x54, 0x1c, 0x04, }, // fa_med
	{ 0x0c, 0x44, 0x04, 0x34, 0x38, }, // fa_iso
	{ 0x0c, 0x02, 0x41, 0x1a, 0x5c, }, // qaf_end
	{ 0x44, 0x44, 0x04, 0x34, 0x38, }, // qaf_ini

	{ 0x04, 0x5c, 0x14, 0x5c, 0x04, }, // qaf_med
	{ 0x06, 0x01, 0x49, 0x19, 0x5e, }, // qaf_iso
	{ 0x16, 0x72, 0x52, 0x02, 0x7c, }, // kaf_iso & kaf_end
	{ 0x04, 0x24, 0x54, 0x4c, 0x44, }, // kaf_med
	{ 0x04, 0x24, 0x54, 0x4c, 0x40, }, // kaf_ini

	{ 0x06, 0x01, 0x01, 0x01, 0x3e, }, // lam_iso & lam_end
	{ 0x04, 0x04, 0x04, 0x7c, 0x00, }, // lam_ini
	{ 0x04, 0x04, 0x7c, 0x04, 0x04, }, // lam_med
	{ 0x1f, 0x70, 0x50, 0x70, 0x00, }, // mim_iso
	{ 0x02, 0x02, 0x03, 0x05, 0x07, }, // mim_ini

// Block: bottom-left
	{ 0x08, 0x0c, 0x14, 0x1c, 0x08, }, // mim_med
	{ 0x1f, 0x30, 0x50, 0x70, 0x08, }, // mim_end
	{ 0x0e, 0x01, 0x21, 0x01, 0x0e, }, // nun_iso & nun_end
	{ 0x04, 0x04, 0x24, 0x04, 0x18, }, // nun_ini
	{ 0x04, 0x04, 0x2c, 0x04, 0x04, }, // nun_med

	{ 0x00, 0x5c, 0x14, 0x5c, 0x00, }, // heh_iso
	{ 0x14, 0x24, 0x4c, 0x54, 0x7c, }, // heh_ini
	{ 0x04, 0x1f, 0x15, 0x0e, 0x04, }, // heh_med
	{ 0x00, 0x30, 0x50, 0x7c, 0x04, }, // heh_end
	{ 0x01, 0x0d, 0x15, 0x1e, 0x00, }, // waw_iso & waw_ini

	{ 0x01, 0x0d, 0x15, 0x1e, 0x04, }, // waw_med & waw_end
	{ 0x04, 0x74, 0x0c, 0x7c, 0x00, }, // la_iso & la_ini 
	{ 0x04, 0x74, 0x0c, 0x7c, 0x04, }, // la_med & la_end (*)
	{ 0x06, 0x01, 0x0d, 0x13, 0x08, }, // ya_iso & ya_end
	{ 0x05, 0x04, 0x05, 0x04, 0x08, }, // ya_ini
	{ 0x04, 0x05, 0x0c, 0x05, 0x04, }, // ya_med

// Block: bottom-right
	{ 0x0e, 0x01, 0x01, 0x01, 0x0e, }, // long_end
	{ 0x04, 0x0c, 0x04, 0x0c, 0x00, }, // sin_end (must be followed by long_end)
//	{ 0x0e, 0x01, 0x01, 0x01, 0x0e, }, // long_end
	{ 0x24, 0x4c, 0x24, 0x0c, 0x04, }, // shin_end (must be followed by long_end)
	{ 0x14, 0x74, 0x54, 0x04, 0x08, }, // hamzah_ini & hamzah_med

//	{ 0x0e, 0x01, 0x01, 0x01, 0x0e, }, // long_end
	{ 0x04, 0x0e, 0x14, 0x1c, 0x00, }, // sad_iso (must be followed by long_end)
//	{ 0x0e, 0x01, 0x01, 0x01, 0x0e, }, // long_end
	{ 0x44, 0x0e, 0x14, 0x1c, 0x04, }, // dad_end (must be followed by long_end)
	{ 0x00, 0x04, 0x0c, 0x14, 0x00, }, // hamzah_iso

	{ 0x00, 0x00, 0x10, 0x30, 0x50, }, // hamzah_for_waw_end
//	{ 0x01, 0x0d, 0x15, 0x1e, 0x04, }, // waw_end (already_exists)

};

// (*) NOTE: personal add, not in original PDF








